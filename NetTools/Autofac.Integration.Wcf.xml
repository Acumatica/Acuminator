<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Integration.Wcf</name>
    </assembly>
    <members>
        <member name="T:Autofac.Integration.Wcf.AutofacDependencyInjectionServiceBehavior">
            <summary>
            Sets the instance provider to an AutofacInstanceProvider.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacDependencyInjectionServiceBehavior.#ctor(Autofac.ILifetimeScope,Autofac.Integration.Wcf.ServiceImplementationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Wcf.AutofacDependencyInjectionServiceBehavior"/> class.
            </summary>
            <param name="rootLifetimeScope">
            The container from which service implementations should be resolved.
            </param>
            <param name="serviceData">
            Data about which service type should be hosted and how to resolve
            the type to use for the service implementation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="rootLifetimeScope" /> or <paramref name="serviceData" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacDependencyInjectionServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The service host that is currently being constructed.</param>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacDependencyInjectionServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Provides the ability to pass custom data to binding elements to support the contract implementation.
            </summary>
            <param name="serviceDescription">The service description of the service.</param>
            <param name="serviceHostBase">The host of the service.</param>
            <param name="endpoints">The service endpoints.</param>
            <param name="bindingParameters">Custom objects to which binding elements have access.</param>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacDependencyInjectionServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The host that is currently being built.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="serviceDescription" /> or
            <paramref name="serviceHostBase" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Integration.Wcf.AutofacInstanceContext">
            <summary>
            Manages instance lifecycle using an Autofac inner container.
            </summary>
            <remarks>
            <para>
            This instance context extension creates a child lifetime scope based
            on a scope provided and resolves service instances from that child scope.
            </para>
            <para>
            When this instance context is disposed, the lifetime scope it creates
            (which contains the resolved service instance) is also disposed.
            </para>
            </remarks>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacInstanceContext.Current">
            <summary>
            Gets the current <see cref="T:Autofac.Integration.Wcf.AutofacInstanceContext"/>
            for the operation.
            </summary>
            <value>
            The <see cref="T:Autofac.Integration.Wcf.AutofacInstanceContext"/> associated
            with the current <see cref="T:System.ServiceModel.OperationContext"/> if
            one exists; or <see langword="null" /> if there isn't one.
            </value>
            <remarks>
            <para>
            In a singleton service, there won't be a current <see cref="T:Autofac.Integration.Wcf.AutofacInstanceContext"/>
            because singleton services are resolved at the time the service host begins
            rather than on each operation.
            </para>
            </remarks>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacInstanceContext.OperationLifetime">
            <summary>
            Gets the request/operation lifetime.
            </summary>
            <value>
            An <see cref="T:Autofac.ILifetimeScope"/> that this instance
            context will use to resolve service instances.
            </value>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceContext.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Wcf.AutofacInstanceContext"/> class.
            </summary>
            <param name="container">
            The outer container/lifetime scope from which the instance scope
            will be created.
            </param>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Autofac.Integration.Wcf.AutofacInstanceContext"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceContext.Attach(System.ServiceModel.InstanceContext)">
            <summary>
            Enables an extension object to find out when it has been aggregated.
            Called when the extension is added to the
            <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions"/> property.
            </summary>
            <param name="owner">The extensible object that aggregates this extension.</param>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceContext.Detach(System.ServiceModel.InstanceContext)">
            <summary>
            Enables an object to find out when it is no longer aggregated.
            Called when an extension is removed from the
            <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions"/> property.
            </summary>
            <param name="owner">The extensible object that aggregates this extension.</param>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceContext.Dispose(System.Boolean)">
            <summary>
            Handles disposal of managed and unmanaged resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to dispose of managed resources (during a manual execution
            of <see cref="M:Autofac.Integration.Wcf.AutofacInstanceContext.Dispose"/>); or
            <see langword="false" /> if this is getting run as part of finalization where
            managed resources may have already been cleaned up.
            </param>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacInstanceContext.ComponentRegistry">
            <summary>
            Associates services with the components that provide them.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceContext.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component instance.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceContext.Resolve(Autofac.Integration.Wcf.ServiceImplementationData)">
            <summary>
            Retrieve a service instance from the context.
            </summary>
            <param name="serviceData">
            Data object containing information about how to resolve the service
            implementation instance.
            </param>
            <returns>The service instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="serviceData" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Integration.Wcf.AutofacInstanceProvider">
            <summary>
            Retrieves service instances from an Autofac container.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceProvider.#ctor(Autofac.ILifetimeScope,Autofac.Integration.Wcf.ServiceImplementationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Wcf.AutofacInstanceProvider"/> class.
            </summary>
            <param name="rootLifetimeScope">
            The lifetime scope from which service instances should be resolved.
            </param>
            <param name="serviceData">
            Data object containing information about how to resolve the service
            implementation instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="rootLifetimeScope" /> or <paramref name="serviceData" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
            <summary>
            Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext"/> object.
            </summary>
            <param name="instanceContext">The current <see cref="T:System.ServiceModel.InstanceContext"/> object.</param>
            <returns>A user-defined service object.</returns>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext"/> object.
            </summary>
            <param name="instanceContext">The current <see cref="T:System.ServiceModel.InstanceContext"/> object.</param>
            <param name="message">The message that triggered the creation of a service object.</param>
            <returns>The service object.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="instanceContext" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
            <summary>
            Called when an <see cref="T:System.ServiceModel.InstanceContext"/> object recycles a service object.
            </summary>
            <param name="instanceContext">The service's instance context.</param>
            <param name="instance">The service object to be recycled.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="instanceContext" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Integration.Wcf.AutofacServiceHostFactory">
            <summary>
            Creates <see cref="T:System.ServiceModel.ServiceHost"/> instances for WCF.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> for a specified type of service with a specific base address.
            </summary>
            <param name="serviceType">Specifies the type of service to host.</param>
            <param name="baseAddresses">The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost"/> for the type of service specified with a specific base address.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="serviceType" /> or <paramref name="baseAddresses" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacServiceHostFactory.CreateSingletonServiceHost(System.Object,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> for a specified type of service with a specific base address.
            </summary>
            <param name="singletonInstance">Specifies the singleton service instance to host.</param>
            <param name="baseAddresses">The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost"/> for the singleton service instance specified with a specific base address.
            </returns>
        </member>
        <member name="T:Autofac.Integration.Wcf.AutofacHostFactoryResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactoryResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactoryResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactoryResources.ContainerIsNull">
            <summary>
              Looks up a localized string similar to The AutofacServiceHost.Container static property must be set before services can be instantiated..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactoryResources.ImplementationTypeUnknown">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; is registered in such a way that its implementation type could not be derived. This is required for WCF integration. Consider using a reflection-based registration or an expression-based registration where the return value is a class type. The current default registration is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactoryResources.NoServiceTypeToHost">
            <summary>
              Looks up a localized string similar to No type to host was provided by the &apos;{0}&apos; for the service &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactoryResources.ServiceMustBeSingleInstance">
            <summary>
              Looks up a localized string similar to The WCF service &apos;{0}&apos; has an InstanceContextMode of Single and is not registered as SingleInstance with the Autofac container..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactoryResources.ServiceMustNotBeSingleInstance">
            <summary>
              Looks up a localized string similar to The WCF service &apos;{0}&apos; does not have an InstanceContextMode of Single and is registered as SingleInstance with the Autofac container..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactoryResources.ServiceNotRegistered">
            <summary>
              Looks up a localized string similar to The service &apos;{0}&apos; configured for WCF is not registered with the Autofac container..
            </summary>
        </member>
        <member name="T:Autofac.Integration.Wcf.AutofacWebServiceHostFactory">
            <summary>
            Creates ServiceHost instances for WCF.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacWebServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> for a specified type of service with a specific base address.
            </summary>
            <param name="serviceType">Specifies the type of service to host.</param>
            <param name="baseAddresses">The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.Web.WebServiceHost"/> for the type of service specified with a specific base address.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="serviceType" /> or <paramref name="baseAddresses" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacWebServiceHostFactory.CreateSingletonServiceHost(System.Object,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> for a specified type of service with a specific base address.
            </summary>
            <param name="singletonInstance">Specifies the singleton service instance to host.</param>
            <param name="baseAddresses">The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.Web.WebServiceHost"/> for the singleton service instance specified with a specific base address.
            </returns>
        </member>
        <member name="T:Autofac.Integration.Wcf.AutofacHostFactory">
            <summary>
            Creates service host instances for WCF.
            </summary>
            <remarks>
            <para>
            The Autofac service host factory allows you to change
            the strategy by which service implementations are resolved. You do this by
            setting the <see cref="P:Autofac.Integration.Wcf.AutofacHostFactory.ServiceImplementationDataProvider"/>
            with a strategy implementation.
            </para>
            <para>
            If <see cref="P:Autofac.Integration.Wcf.AutofacHostFactory.ServiceImplementationDataProvider"/>
            is <see langword="null" /> a new instance of <see cref="T:Autofac.Integration.Wcf.DefaultServiceImplementationDataProvider"/>
            will be used.
            </para>
            <para>
            You may configure additional behaviors or other aspects of generated
            service instances by setting the <see cref="P:Autofac.Integration.Wcf.AutofacHostFactory.HostConfigurationAction"/>.
            If this value is not <see langword="null" />, generated host instances
            will be run through that action.
            </para>
            </remarks>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactory.Container">
            <summary>
            Gets or sets the container or lifetime scope from which service instances will be retrieved.
            </summary>
            <value>
            An <see cref="T:Autofac.ILifetimeScope"/> that will be used to resolve service
            implementation instances.
            </value>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactory.HostConfigurationAction">
            <summary>
            Gets or sets an action that can be used to programmatically configure
            service host instances this factory generates.
            </summary>
            <value>
            An <see cref="T:System.Action`1"/> that can be used to configure service host
            instances that this factory creates. This action can be used to add
            behaviors or otherwise modify the host before it gets returned by
            the factory.
            </value>
        </member>
        <member name="P:Autofac.Integration.Wcf.AutofacHostFactory.ServiceImplementationDataProvider">
            <summary>
            Gets or sets the service implementation data strategy.
            </summary>
            <value>
            An <see cref="T:Autofac.Integration.Wcf.IServiceImplementationDataProvider"/>
            that will be used to determine the proper service implementation given
            a service constructor string.
            </value>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacHostFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> with specific base addresses and initializes it with specified data.
            </summary>
            <param name="constructorString">The initialization data passed to the <see cref="T:System.ServiceModel.ServiceHostBase"/> instance being constructed by the factory.</param>
            <param name="baseAddresses">The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost"/> with specific base addresses.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="constructorString" /> or <paramref name="baseAddresses"/> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="constructorString" /> is empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <see cref="P:Autofac.Integration.Wcf.AutofacHostFactory.Container"/>
            is <see langword="null" />.
            </exception>
            <remarks>
            <para>
            If <see cref="P:Autofac.Integration.Wcf.AutofacHostFactory.HostConfigurationAction"/>
            is not <see langword="null" />, the new service host instance is run
            through the configuration action prior to being returned. This allows
            you to programmatically configure behaviors or other aspects of the
            host.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Integration.Wcf.AutofacHostFactory.CreateSingletonServiceHost(System.Object,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> for a specified type of service with a specific base address.
            </summary>
            <param name="singletonInstance">Specifies the singleton service instance to host.</param>
            <param name="baseAddresses">The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost"/> for the singleton service instance specified with a specific base address.
            </returns>
        </member>
        <member name="T:Autofac.Integration.Wcf.DefaultServiceImplementationDataProvider">
            <summary>
            Simple resolver for WCF service implementations. Allows for single-tenant
            handling of named or typed services.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.DefaultServiceImplementationDataProvider.GetServiceImplementationData(System.String)">
            <summary>
            Gets data about a service implementation.
            </summary>
            <param name="value">
            The constructor string passed in to the service host factory
            that is used to determine which type to host/use as a service
            implementation.
            </param>
            <returns>
            A <see cref="T:Autofac.Integration.Wcf.ServiceImplementationData"/>
            object containing information about which type to use in
            the service host and which type to use to resolve the implementation.
            </returns>
            <remarks>
            <para>
            This resolver takes the constructor string stored in the .svc file
            and resolves a matching keyed or typed service from the root
            application container. That resolved type is used both for the
            service host as well as the implementation type.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <see cref="P:Autofac.Integration.Wcf.AutofacHostFactory.Container"/>
            is <see langword="null" />;
            if the service indicated by <paramref name="value" />
            is not registered with the <see cref="P:Autofac.Integration.Wcf.AutofacHostFactory.Container"/>;
            or if the service is a singleton that isn't registered as a singleton.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="value" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="value" /> is empty.
            </exception>
        </member>
        <member name="T:Autofac.Integration.Wcf.IServiceImplementationDataProvider">
            <summary>
            Defines a strategy for resolving which service type should be
            used for hosting vs. which type is the actual service implementation.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.IServiceImplementationDataProvider.GetServiceImplementationData(System.String)">
            <summary>
            Gets data about a service implementation.
            </summary>
            <param name="value">
            The constructor string passed in to the service host factory
            that is used to determine which type to host/use as a service
            implementation.
            </param>
            <returns>
            A <see cref="T:Autofac.Integration.Wcf.ServiceImplementationData"/>
            object containing information about which type to use in
            the service host and how to resolve the implementation.
            </returns>
        </member>
        <member name="T:Autofac.Integration.Wcf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.Properties.Resources.ArgumentException_StringEmpty">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; may not be empty..
            </summary>
        </member>
        <member name="T:Autofac.Integration.Wcf.RegistrationExtensions">
            <summary>
            Extend the registration syntax with WCF-specific helpers.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.RegistrationExtensions.UseWcfSafeRelease``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Dispose the channel instance in such a way that exceptions 
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set release action for.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>This will eat exceptions generated in the closing of the channel.</remarks>
        </member>
        <member name="T:Autofac.Integration.Wcf.ServiceHostExtensions">
            <summary>
            Adds dependency injection related methods to service hosts.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Wcf.ServiceHostExtensions.AddDependencyInjectionBehavior``1(System.ServiceModel.ServiceHostBase,Autofac.ILifetimeScope)">
            <summary>
            Adds the custom service behavior required for dependency injection.
            </summary>
            <typeparam name="T">The web service contract type.</typeparam>
            <param name="serviceHost">The service host.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Autofac.Integration.Wcf.ServiceHostExtensions.AddDependencyInjectionBehavior(System.ServiceModel.ServiceHostBase,System.Type,Autofac.ILifetimeScope)">
            <summary>
            Adds the custom service behavior required for dependency injection.
            </summary>
            <param name="serviceHost">The service host.</param>
            <param name="contractType">The web service contract type.</param>
            <param name="container">The container.</param>
        </member>
        <member name="T:Autofac.Integration.Wcf.ServiceHostExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.ServiceHostExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.ServiceHostExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Wcf.ServiceHostExtensionsResources.ContractTypeNotRegistered">
            <summary>
              Looks up a localized string similar to The service contract type &apos;{0}&apos; has not been registered in the container..
            </summary>
        </member>
        <member name="T:Autofac.Integration.Wcf.ServiceImplementationData">
            <summary>
            Contains data about a WCF service implementation.
            </summary>
            <remarks>
            <para>
            This data transfer object class is used in conjunction with
            <see cref="T:Autofac.Integration.Wcf.IServiceImplementationDataProvider"/>
            implementations for resolving service implementation instance information.
            </para>
            </remarks>
            <seealso cref="T:Autofac.Integration.Wcf.IServiceImplementationDataProvider"/>
        </member>
        <member name="P:Autofac.Integration.Wcf.ServiceImplementationData.ConstructorString">
            <summary>
            Gets or sets the string used to generate the data.
            </summary>
            <value>
            A <see cref="T:System.String"/> used to generate this service
            implementation data.
            </value>
        </member>
        <member name="P:Autofac.Integration.Wcf.ServiceImplementationData.HostAsSingleton">
            <summary>
            Gets or sets an indicator of whether the service should be hosted as a singleton.
            </summary>
            <value>
            <see langword="true" /> if this service should be a singleton; <see langword="false" /> if not.
            </value>
        </member>
        <member name="P:Autofac.Integration.Wcf.ServiceImplementationData.ServiceTypeToHost">
            <summary>
            Gets or sets the concrete type to host.
            </summary>
            <value>
            A <see cref="T:System.Type"/> that indicates the type to pass to the
            service host when it is initially created. This type must be a concrete
            class and not an interface.
            </value>
        </member>
        <member name="P:Autofac.Integration.Wcf.ServiceImplementationData.ImplementationResolver">
            <summary>
            Gets or sets a mechanism that allows the <see cref="T:Autofac.Integration.Wcf.AutofacInstanceContext"/>
            to get the actual implementation for a service.
            </summary>
            <value>
            An <see cref="T:System.Func`2"/> that takes in a lifetime scope returns
            an <see cref="T:System.Object"/> that is the implementation type for the
            given service. This is the object that the service host will use
            and should be assignable from the <see cref="P:Autofac.Integration.Wcf.ServiceImplementationData.ServiceTypeToHost"/>.
            </value>
        </member>
    </members>
</doc>
