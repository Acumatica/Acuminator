<UserControl x:Class="Acuminator.Vsix.ToolWindows.CodeMap.CodeMapSearchBoxControl"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
			 xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
			 xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
			 xmlns:platformUI="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
			 xmlns:codeMap="clr-namespace:Acuminator.Vsix.ToolWindows.CodeMap"
			 xmlns:filter="clr-namespace:Acuminator.Vsix.ToolWindows.CodeMap.Filter"
			 xmlns:utils="clr-namespace:Acuminator.Utilities.Common;assembly=Acuminator.Utilities"
			 xmlns:converters="clr-namespace:Acuminator.Vsix.ToolWindows.Converters"
			 mc:Ignorable="d" 
			 d:DesignHeight="20" d:DesignWidth="200"
			 d:DataContext="{d:DesignInstance Type={x:Type filter:FilterViewModel}, IsDesignTimeCreatable=True}">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="../../../Resources/Themes/Styles.xaml"/>
				<ResourceDictionary>
					<!--#region Converters-->
					<converters:BoolToVisibilityConverter x:Key="boolToVisibilityConverter"/>
					<converters:StringIsNonEmptyToBoolConverter x:Key="stringIsNonEmptyConverter"/>
					<!--#endregion-->
					
					<!--#region Images-->
					<BitmapImage x:Key="SearchImage" DecodePixelHeight="16" DecodePixelWidth="16" CacheOption="OnLoad"
								 UriSource="pack://application:,,,/Acuminator;component/Resources/Search.png"/>

					<BitmapImage x:Key="ClearImage" DecodePixelHeight="16" DecodePixelWidth="16" CacheOption="OnLoad"
								 UriSource="pack://application:,,,/Acuminator;component/Resources/Clear.png"/>
					<!--#endregion-->
				</ResourceDictionary>
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</UserControl.Resources>

	<Border Name="Bd">
		<Border.Style>
			<Style TargetType="Border">
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUI:SearchControlColors.UnfocusedBorderBrushKey}}"/>

				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUI:SearchControlColors.DisabledBorderBrushKey}}"/>
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsEnabled" Value="True"/>
							<Condition Property="IsMouseOver" Value="True"/>
						</MultiTrigger.Conditions>

						<Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUI:SearchControlColors.MouseOverBorderBrushKey}}"/>
					</MultiTrigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsEnabled" Value="True"/>
							<Condition Property="IsFocused" Value="True"/>
						</MultiTrigger.Conditions>

						<Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUI:SearchControlColors.FocusedBorderBrushKey}}"/>
					</MultiTrigger>
				</Style.Triggers>
			</Style>
		</Border.Style>
		
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="Auto"/>
			</Grid.ColumnDefinitions>

			<TextBox Name="SearchTextBox" x:FieldModifier="private" Grid.Column="0" Padding="1" 
					 TextChanged="SearchTextBox_TextChanged" KeyDown="SearchTextBox_KeyDown"
					 Text="{Binding Path=FilterText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
				<TextBox.Style>
					<Style TargetType="{x:Type TextBox}">
						<Setter Property="Background" Value="Transparent"/>
						<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.UnfocusedTextBrushKey}}"/>

						<Style.Triggers>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Background" Value="{DynamicResource {x:Static platformUI:SearchControlColors.DisabledBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.DisabledTextBrushKey }}"/>
							</Trigger>
							
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsEnabled" Value="True"/>
									<Condition Property="IsMouseOver" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Background" Value="{DynamicResource {x:Static platformUI:SearchControlColors.MouseOverBackgroundBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.MouseOverBackgroundTextBrushKey}}"/>
							</MultiTrigger>
							
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsEnabled" Value="True"/>
									<Condition Property="IsFocused" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Background" Value="{DynamicResource {x:Static platformUI:SearchControlColors.FocusedBackgroundBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.FocusedBackgroundTextBrushKey}}"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsEnabled" Value="True"/>
									<Condition Property="IsKeyboardFocused" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Background" Value="{DynamicResource {x:Static platformUI:SearchControlColors.SearchActiveBackgroundBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.SearchActiveBackgroundTextBrushKey}}"/>
							</MultiTrigger>
						</Style.Triggers>
					</Style>
				</TextBox.Style>
			</TextBox>

			<TextBlock x:Name="WatermarkTextBlock" IsHitTestVisible="False" Padding="1" Text="Search..."
					   Foreground="{Binding ElementName=SearchTextBox, Path=Foreground, UpdateSourceTrigger=PropertyChanged}"
					   Background="{Binding ElementName=SearchTextBox, Path=Background, UpdateSourceTrigger=PropertyChanged}">
				<TextBlock.Style>
					<Style TargetType="{x:Type TextBlock}">
						<Setter Property="Visibility" Value="Collapsed"/>
						<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.UnfocusedWatermarkTextBrushKey}}"/>

						<Style.Triggers>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition Binding="{Binding ElementName=SearchTextBox, Path=Text, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
																 Converter={StaticResource stringIsNonEmptyConverter}}" Value="False"/>
									<Condition Binding="{Binding ElementName=SearchTextBox, Path=IsKeyboardFocused, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
											   Value="False"/>
								</MultiDataTrigger.Conditions>
								
								<Setter Property="Visibility" Value="Visible"/>
							</MultiDataTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="Visibility" Value="Visible"/>
									<Condition Property="IsMouseOver" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.MouseOverWatermarkTextBrushKey}}"/>
							</MultiTrigger>
						</Style.Triggers>
					</Style>
				</TextBlock.Style>
			</TextBlock>

			<Button x:Name="ClearButton" Grid.Column="1" Focusable="False" Background="Transparent" 
					BorderBrush="Transparent" VerticalAlignment="Center" MaxWidth="18" MinWidth="18" MaxHeight="18" MinHeight="18"
					Command="{Binding Path=ClearCommand}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
				<Button.Style>
					<Style TargetType="{x:Type Button}" BasedOn="{StaticResource vsButtonStyle}">
						<Setter Property="Visibility" Value="Collapsed"/>
						<Setter Property="IsEnabled" Value="False"/>
						<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.ClearGlyphBrushKey}}"/>

						<Style.Triggers>
							<DataTrigger Binding="{Binding ElementName=SearchTextBox, Path=Text, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
														   Converter={StaticResource stringIsNonEmptyConverter}}" Value="True">
								<Setter Property="Visibility" Value="Visible"/>
								<Setter Property="IsEnabled" Value="True"/>
							</DataTrigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Background" Value="Transparent"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.DisabledBrushKey }}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsEnabled" Value="True"/>
									<Condition Property="IsMouseOver" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.MouseOverClearGlyphBrushKey}}"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsEnabled" Value="True"/>
									<Condition Property="IsFocused" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:SearchControlColors.FocusedClearGlyphBrushKey}}"/>
							</MultiTrigger>
						</Style.Triggers>
					</Style>
				</Button.Style>

				<Image x:Name="ClearGlyphIcon" Source="{StaticResource ClearImage}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
					<Image.Style>
						<Style TargetType="{x:Type Image}">
							<Setter Property="Source" Value="{StaticResource SearchImage}"/>

							<Style.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Opacity" Value="0.3"/>
								</Trigger>
							</Style.Triggers>
						</Style>
					</Image.Style>
				</Image>
			</Button>

			<Image x:Name="SearchGlyphIcon" Grid.Column="1" Margin="3,0,0,0" Source="{StaticResource SearchImage}" Focusable="False" 
				   VerticalAlignment="Stretch" HorizontalAlignment="Stretch" MaxWidth="18" MinWidth="18" MaxHeight="18" MinHeight="18">
				<Image.Style>
					<Style TargetType="Image">
						<Setter Property="Visibility" Value="Visible"/>

						<Style.Triggers>
							<DataTrigger Binding="{Binding ElementName=ClearButton, Path=Visibility, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
										 Value="Visible">
								<Setter Property="Visibility" Value="Collapsed"/>
								<Setter Property="IsEnabled" Value="False"/>
							</DataTrigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Opacity" Value="0.3"/>
							</Trigger>
						</Style.Triggers>
					</Style>
				</Image.Style>
			</Image>
		</Grid>
	</Border>
</UserControl>
