<UserControl x:Class="Acuminator.Vsix.ToolWindows.CodeMap.CodeMapWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:platformUI="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:codeMap="clr-namespace:Acuminator.Vsix.ToolWindows.CodeMap"
             xmlns:converters="clr-namespace:Acuminator.Vsix.ToolWindows.Converters"
                      
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300"
            
             Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
             Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
             d:DataContext="{d:DesignInstance Type={x:Type codeMap:CodeMapWindowViewModel}, IsDesignTimeCreatable=False}">
    
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="../../../Resources/Themes/Styles.xaml"/>

                <ResourceDictionary>
                    <!--Converters-->                  
                    <converters:BoolToVisibilityConverter x:Key="boolToVisibilityConverter"/>
					<converters:BoolInversionConverter x:Key="boolInverter"/>
					
					<!-- Bitmap Images -->
                    <BitmapImage x:Key="RefreshImage" DecodePixelHeight="16" DecodePixelWidth="16" CacheOption="OnLoad"
                                 UriSource="pack://application:,,,/Acuminator;component/Resources/Refresh.ico"/>
				
					<!-- Image Style-->
                    <Style TargetType="Image" BasedOn="{StaticResource vsImageStyle}"/>

                    <!-- Button Style-->
					<Style TargetType="Button" BasedOn="{StaticResource vsButtonStyle}"/>

					<Style x:Key="RefreshButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Static vsshell:VsResourceKeys.ButtonStyleKey}}">
						<Style.Resources>
							<Style TargetType="Border">
								<Setter Property="CornerRadius" Value="0" />
							</Style>
						</Style.Resources>
						
						<Setter Property="Background" Value="Transparent"/>
						<Setter Property="BorderBrush" Value="Transparent"/>
						<Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarTextActiveKey}}"/>

						<Style.Triggers>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver" Value="False"/>
									<Condition Property="IsFocused" Value="True"/>
									<Condition Property="IsEnabled" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Background" Value="{DynamicResource {x:Static platformUI:CommonControlsColors.ButtonFocusedBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:CommonControlsColors.ButtonFocusedTextBrushKey}}"/>
								<Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUI:CommonControlsColors.ButtonBorderFocusedBrushKey}}"/>
							</MultiTrigger>

							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver" Value="True"/>
									<Condition Property="IsEnabled" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarMouseOverBackgroundGradientKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarTextHoverKey}}"/>
								<Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarBorderKey}}"/>
							</MultiTrigger>

							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsPressed" Value="True"/>
									<Condition Property="IsEnabled" Value="True"/>
								</MultiTrigger.Conditions>

								<Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarMouseDownBackgroundGradientKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarTextHoverKey}}"/>
								<Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarMouseDownBorderKey}}"/>
							</MultiTrigger>

							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Background" Value="{DynamicResource {x:Static platformUI:CommonControlsColors.ButtonDisabledBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static platformUI:CommonControlsColors.ButtonDisabledTextBrushKey}}"/>
								<Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUI:CommonControlsColors.ButtonBorderDisabledBrushKey}}"/>
								<Setter Property="Opacity" Value="0.3"/>
							</Trigger>
						</Style.Triggers>
					</Style>
				</ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <UserControl.Style>
        <Style TargetType="UserControl">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsCalculating, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                    <Setter Property="Cursor" Value="Wait"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Style>
    <Grid>
        <Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!--<WrapPanel Orientation="Horizontal" Grid.Row="0">
            <TextBlock Text="Display Mode" Margin="10,2,0,2" VerticalAlignment="Center"/>
            <ComboBox VerticalAlignment="Center" Margin="10,5,0,5" MinWidth="120">
                
            </ComboBox>
        </WrapPanel>-->
		

		<Grid Grid.Row="0" Margin="5,2">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition Width="*"/>
			</Grid.ColumnDefinitions>
			
			<WrapPanel Grid.Column="0" Orientation="Horizontal"
					   Visibility="{Binding Path=IsCalculating, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, 
											Converter={StaticResource boolToVisibilityConverter}, ConverterParameter=!}">
				<Button Name="RefreshButton" VerticalAlignment="Center" ToolTip="Refresh Code Map" Padding="0,1" Command="{Binding Path=RefreshCodeMapCommand}"
						MaxHeight="20" MinHeight="20" MaxWidth="20" MinWidth="20" Style="{StaticResource RefreshButtonStyle}"
						IsEnabled="{Binding Path=IsCalculating, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource boolInverter}}">
					
					<Image Source="{StaticResource RefreshImage}" Style="{StaticResource vsImageStyle}"/>
				</Button>
			</WrapPanel>

			<codeMap:CodeMapSearchBoxControl Grid.Column="1" Margin="5,0,0,0" MaxHeight="21" MinHeight="21" 
											 HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
											 DataContext="{Binding Path=FilterVM, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
											 IsEnabled="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid}, 
																 Path=DataContext.IsCalculating, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, 
																 Converter={StaticResource boolInverter}}">
				<codeMap:CodeMapSearchBoxControl.Style>
					<Style TargetType="codeMap:CodeMapSearchBoxControl">
						<Setter Property="Visibility" Value="Visible"/>

						<Style.Triggers>
							<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid}, Path=DataContext.IsCalculating, 
														   Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
								<Setter Property="Visibility" Value="Collapsed"/>
							</DataTrigger>
							<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid}, Path=DataContext.Tree, 
														   Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
								<Setter Property="Visibility" Value="Collapsed"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</codeMap:CodeMapSearchBoxControl.Style>
			</codeMap:CodeMapSearchBoxControl>
			
			<ProgressBar Grid.Column="1" IsIndeterminate="True"  MaxHeight="16" MinHeight="16"
						 HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="5,0,0,0"
						 Visibility="{Binding Path=IsCalculating, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
											  Converter={StaticResource boolToVisibilityConverter}}"/>
		</Grid>

		<codeMap:CodeMapTreeControl Grid.Row="2" Margin="0,2"
									DataContext="{Binding Path=Tree, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
	</Grid>
</UserControl>
