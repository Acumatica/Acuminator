<UserControl x:Class="Acuminator.Vsix.ToolWindows.AntiPlagiator.AntiPlagiatorWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.14.0"
             xmlns:platformUI="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
             xmlns:antiPlagiator="clr-namespace:Acuminator.Vsix.ToolWindows.AntiPlagiator"
             xmlns:converters="clr-namespace:Acuminator.Vsix.ToolWindows.Converters"
            
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="800"
             d:DataContext="{d:DesignInstance Type=antiPlagiator:AntiPlagiatorWindowViewModel, IsDesignTimeCreatable=True}"
             Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
             Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Themes/Styles.xaml"/>

                <ResourceDictionary>
                    <!--Converters-->
                    <converters:BoolInversionConverter x:Key="boolInversionConverter"/>
                    <converters:BoolToVisibilityConverter x:Key="visibilityConverter"/>

                    <!-- Buttons Style-->                                                     
                    <Style x:Key="toolbarButtonStyle" TargetType="Button" BasedOn="{StaticResource vsButtonStyle}">
                        <Setter Property="Padding" Value="4,2,4,2"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="5,2,0,2"/>
                        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                        <Setter Property="MaxWidth" Value="30"/>
                        <Setter Property="MinWidth" Value="30"/>
                    </Style>

                    <!-- Image Style-->
                    <Style TargetType="Image" BasedOn="{StaticResource vsImageStyle}"/>

                    <Style x:Key="datagridCellStyle" TargetType="DataGridCell">
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                        <EventSetter Event="MouseDoubleClick" Handler="DataGridCell_MouseDoubleClick"/>
                    </Style>
                    
                    <Style x:Key="cellTextBlockStyle" TargetType="TextBlock">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="ToolTip" 
                                Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="Margin" Value="2,0"/>
                    </Style>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <UserControl.DataContext>
        <antiPlagiator:AntiPlagiatorWindowViewModel/>
    </UserControl.DataContext>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Border Grid.Row="0" BorderThickness="1" CornerRadius="3" Margin="2,4"
                BorderBrush="{DynamicResource {x:Static platformUI:EnvironmentColors.BrandedUIBorderBrushKey}}">
            <WrapPanel Orientation="Horizontal">
                <StackPanel Orientation="Horizontal" 
                            IsEnabled="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, 
                                                Converter={StaticResource boolInversionConverter}}">
                    <TextBlock Text="Threshhold:" Margin="10,2,0,2" VerticalAlignment="Center"/>
                    <TextBox Text="{Binding Path=ThreshholdPercent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                                            StringFormat={}{0:F1}, ValidatesOnExceptions=True}"
                             TextAlignment="Center" Margin="10,2,0,2" MinWidth="50" MaxWidth="50" VerticalAlignment="Center"/>
                    <TextBlock Text="%" Margin="2,2,0,2" VerticalAlignment="Center"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Reference Solution:" Margin="10,2,0,2" VerticalAlignment="Center"/>
                    <TextBox Text="{Binding Path=ReferenceSolutionPath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                             Margin="10,2,0,2" IsReadOnly="True" MinWidth="200" MaxWidth="200" VerticalAlignment="Center"
                             ToolTip="{Binding Path=ReferenceSolutionPath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <Button ToolTip="Open Reference Solution"  Command="{Binding Path=OpenReferenceSolutionCommand}"
                            Style="{StaticResource toolbarButtonStyle}"
                            IsEnabled="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                Converter={StaticResource boolInversionConverter}}">
                        <Image Source="pack://application:,,,/Acuminator;component/Resources/OpenFolder.ico"/>
                    </Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <Button ToolTip="Run Anti-Plagiator" Command="{Binding Path=RunAnalysisCommand}">
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource toolbarButtonStyle}">
                                <Setter Property="IsEnabled" Value="True"/>

                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=ReferenceSolutionPath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                                 Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>

                        <Image Source="pack://application:,,,/Acuminator;component/Resources/Run.ico"/>
                    </Button>

                    <Button ToolTip="Cancel analysis" Command="{Binding Path=CancelAnalysisCommand}" Style="{StaticResource toolbarButtonStyle}"
                            IsEnabled="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                Converter={StaticResource visibilityConverter}}">
                        <Image Source="pack://application:,,,/Acuminator;component/Resources/Cancel.ico"/>
                    </Button>

                    <ProgressBar MinWidth="100" Margin="10,5,0,5"
                                 Visibility="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                      Converter={StaticResource visibilityConverter}}"                          
                                 IsIndeterminate="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
            </WrapPanel>
        </Border>

        <DataGrid Grid.Row="1" Style="{StaticResource readonlyDataGridStyle}" CellStyle="{StaticResource datagridCellStyle}"               
                  ItemsSource="{Binding Path=PlagiatedItems, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                  SelectedItem="{Binding Path=SelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Source Name" Width="*" Binding="{Binding Path=SourceName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}"/>

                <DataGridTextColumn Header="Source Location" Width="2*" Binding="{Binding Path=SourceLocation, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource datagridCellStyle}">
                            <Setter Property="Tag" Value="{x:Static antiPlagiator:LocationType.Source}"/> 
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header="Reference Name" Width="*" Binding="{Binding Path=ReferenceName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}"/>

                <DataGridTextColumn Header="Reference Location" Width="2*" Binding="{Binding Path=ReferenceLocation, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource datagridCellStyle}">
                            <Setter Property="Tag" Value="{x:Static antiPlagiator:LocationType.Reference}"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>

                <DataGridTemplateColumn Header="Similarity" Width="0.5*">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource datagridCellStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsThresholdExceeded, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="ToolTip" Value="The copy paste thresh hold is exceeded!"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                                <Image Source="pack://application:,,,/Acuminator;component/Resources/StatusInvalid.ico"
                                       Style="{StaticResource vsImageStyle}" Margin="2" VerticalAlignment="Center"
                                       Visibility="{Binding Path=IsThresholdExceeded, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                            Converter={StaticResource visibilityConverter}}"/>

                                <TextBlock Style="{StaticResource cellTextBlockStyle}" TextAlignment="Center" VerticalAlignment="Center" Margin="0,2"
                                           Text="{Binding Path=Similarity, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:P1}}"/>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                
                <!--<DataGridTextColumn Header="Type" Width="0.5*" Binding="{Binding Path=Type, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}"/>-->
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>
