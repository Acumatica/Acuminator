<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DacFormatLabel" xml:space="preserve">
    <value>Acuminator - DAC Name</value>
  </data>
  <data name="DacExtensionFormatLabel" xml:space="preserve">
    <value>Acuminator - DAC Extension Name</value>
  </data>
  <data name="DacFieldFormatLabel" xml:space="preserve">
    <value>Acuminator - DAC Field Name</value>
  </data>
  <data name="BQLParameterFormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Parameters</value>
  </data>
  <data name="BQLOperatorFormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Operators</value>
  </data>
  <data name="BQLConstantEndingFormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Constant (Ending)</value>
  </data>
  <data name="BQLConstantPrefixFormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Constant (Prefix)</value>
  </data>
  <data name="PXActionFormatLabel" xml:space="preserve">
    <value>Acuminator - PXAction</value>
  </data>
  <data name="PXGraphFormatLabel" xml:space="preserve">
    <value>Acuminator - PXGraph</value>
  </data>
  <data name="BraceLevel_1_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 1)</value>
  </data>
  <data name="BraceLevel_2_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 2)</value>
  </data>
  <data name="BraceLevel_3_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 3)</value>
  </data>
  <data name="BraceLevel_4_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 4)</value>
  </data>
  <data name="BraceLevel_5_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 5)</value>
  </data>
  <data name="BraceLevel_6_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 6)</value>
  </data>
  <data name="BraceLevel_7_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 7)</value>
  </data>
  <data name="BraceLevel_8_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 8)</value>
  </data>
  <data name="BraceLevel_9_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 9)</value>
  </data>
  <data name="BraceLevel_10_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 10)</value>
  </data>
  <data name="BraceLevel_11_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 11)</value>
  </data>
  <data name="BraceLevel_12_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 12)</value>
  </data>
  <data name="BraceLevel_13_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 13)</value>
  </data>
  <data name="BraceLevel_14_FormatLabel" xml:space="preserve">
    <value>Acuminator - BQL Angle Brackets (Level 14)</value>
  </data>
  <data name="Category_Coloring" xml:space="preserve">
    <value>BQL Coloring</value>
  </data>
  <data name="Category_Outlining" xml:space="preserve">
    <value>BQL Outlining</value>
  </data>
  <data name="Setting_ColoringEnabled_Title" xml:space="preserve">
    <value>Enable coloring</value>
  </data>
  <data name="Setting_ColoringEnabled_Description" xml:space="preserve">
    <value>Colorize BQL syntax. If set to false, all Acuminator coloring is turned off.</value>
  </data>
  <data name="Setting_PXActionColoringEnabled_Title" xml:space="preserve">
    <value>Enable PXAction coloring</value>
  </data>
  <data name="Setting_PXActionColoringEnabled_Description" xml:space="preserve">
    <value>Colorize PXAction declarations (only for Roslyn coloring).</value>
  </data>
  <data name="Setting_PXGraphColoringEnabled_Title" xml:space="preserve">
    <value>Enable PXGraph coloring</value>
  </data>
  <data name="Setting_PXGraphColoringEnabled_Description" xml:space="preserve">
    <value>Colorize PXGraph declarations (only for Roslyn coloring).</value>
  </data>
  <data name="Setting_ColorOnlyInsideBQL_Title" xml:space="preserve">
    <value>Colorize code only inside BQL commands</value>
  </data>
  <data name="Setting_ColorOnlyInsideBQL_Description" xml:space="preserve">
    <value>Colorize code only inside BQL commands (only for Roslyn coloring).</value>
  </data>
  <data name="Setting_UseRegexColoring_Title" xml:space="preserve">
    <value>Use RegEx colorizer</value>
  </data>
  <data name="Setting_UseRegexColoring_Description" xml:space="preserve">
    <value>Use the syntax colorizer based on regular expressions, which provides worse coloring but works faster. If set to false, Roslyn coloring is used.</value>
  </data>
  <data name="Setting_UseBqlOutlining_Title" xml:space="preserve">
    <value>Use BQL outlining</value>
  </data>
  <data name="Setting_UseBqlOutlining_Description" xml:space="preserve">
    <value>Collapse BQL commands (only for Roslyn coloring).</value>
  </data>
  <data name="Setting_UseBqlDetailedOutlining_Title" xml:space="preserve">
    <value>Outline parts of BQL commands</value>
  </data>
  <data name="Setting_UseBqlDetailedOutlining_Description" xml:space="preserve">
    <value>Collapse parts of BQL commands (only for Roslyn coloring). If set to false, BQL commands are collapsed only entirely.</value>
  </data>
  <data name="Setting_CodeAnalysis_RecursiveAnalysisEnabled_Description" xml:space="preserve">
    <value>Analyse the whole invocation tree in a recursive manner.</value>
  </data>
  <data name="Setting_CodeAnalysis_RecursiveAnalysisEnabled_Title" xml:space="preserve">
    <value>Enable recursive code analysis</value>
  </data>
  <data name="Category_CodeAnalysis" xml:space="preserve">
    <value>Code Analysis</value>
  </data>
</root>