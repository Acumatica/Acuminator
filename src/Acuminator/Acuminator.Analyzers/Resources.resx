<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PX1000Fix" xml:space="preserve">
    <value>Fix PXAction handler signature</value>
  </data>
  <data name="PX1000Title" xml:space="preserve">
    <value>Invalid PXAction handler signature</value>
  </data>
  <data name="PX1002Fix" xml:space="preserve">
    <value>Add the type attribute corresponding to the list attribute</value>
  </data>
  <data name="PX1002Title" xml:space="preserve">
    <value>The field must have the type attribute corresponding to the list attribute</value>
  </data>
  <data name="PX1001Fix" xml:space="preserve">
    <value>Create a graph instance by using the factory method</value>
  </data>
  <data name="PX1001Title" xml:space="preserve">
    <value>A PXGraph instance must be created with the PXGraph.CreateInstance() factory method</value>
  </data>
  <data name="PX1003Title" xml:space="preserve">
    <value>Consider using a specific implementation of PXGraph</value>
  </data>
  <data name="PX1004Fix" xml:space="preserve">
    <value>Consider changing the declaration order</value>
  </data>
  <data name="PX1004Title" xml:space="preserve">
    <value>This order of view declarations will cause creation of two cache instances: {0} and {1}</value>
  </data>
  <data name="PX1006Fix" xml:space="preserve">
    <value>Consider changing the declaration order</value>
  </data>
  <data name="PX1006Title" xml:space="preserve">
    <value>This order of view declarations will cause creation of one cache instance for the following DACs: {0} and {1}</value>
  </data>
  <data name="PX1005Fix" xml:space="preserve">
    <value>Change the view delegate name to match the view name</value>
  </data>
  <data name="PX1005MessageFormat" xml:space="preserve">
    <value>A possible typo in the view delegate name. The view name for this delegate: {0}</value>
  </data>
  <data name="PX1005Title" xml:space="preserve">
    <value>A possible typo in the view delegate name</value>
  </data>
  <data name="PX1007Fix" xml:space="preserve">
    <value>Create a DAC instance by using the factory method</value>
  </data>
  <data name="PX1007MessageFormat" xml:space="preserve">
    <value>An instance of {0} must be created with the PXCache&lt;{0}&gt;.CreateInstance() factory method
</value>
  </data>
  <data name="PX1007Title" xml:space="preserve">
    <value>A DAC instance must be created with the PXCache.CreateInstance() factory method</value>
  </data>
  <data name="PX1008Title" xml:space="preserve">
    <value>Reference of @this graph in this delegate will cause synchronous delegate execution</value>
  </data>
  <data name="PX1010Fix" xml:space="preserve">
    <value>Reset StartRow</value>
  </data>
  <data name="PX1010Title" xml:space="preserve">
    <value>If a delegate applies paging in an inner select, StartRow must be reset (If StartRow is not reset, paging will be applied twice)</value>
  </data>
  <data name="PX1009Fix" xml:space="preserve">
    <value>Change the base type to a PXCacheExtension overload</value>
  </data>
  <data name="PX1009Title" xml:space="preserve">
    <value>Multiple levels of inheritance are not supported for PXCacheExtension</value>
  </data>
  <data name="PX1015TitleSuffixWithOnlyRequiredParams" xml:space="preserve">
    <value>The number of arguments passed to the {0} method does not match the number of BQL statement parameters. The number of required arguments is {1}.</value>
  </data>
  <data name="PX1011Fix" xml:space="preserve">
    <value>Mark the type as sealed</value>
  </data>
  <data name="PX1011Title" xml:space="preserve">
    <value>Because multiple levels of inheritance are not supported for PXCacheExtension, the derived type can be marked as sealed</value>
  </data>
  <data name="PX1014Fix" xml:space="preserve">
    <value>Make the type nullable</value>
  </data>
  <data name="PX1014Title" xml:space="preserve">
    <value>A DAC field must have a nullable type</value>
  </data>
  <data name="PX1015TitleSuffixWithRequiredAndOptionalParams" xml:space="preserve">
    <value>The number of arguments passed to the {0} method does not match the number of BQL statement parameters. The number of arguments should be from {1} to {2}.</value>
  </data>
  <data name="PX1021Title" xml:space="preserve">
    <value>The type of the DAC field attribute does not correspond to the property type</value>
  </data>
  <data name="PX1021PropertyFix" xml:space="preserve">
    <value>Change the property type so that it corresponds to the attribute type</value>
  </data>
  <data name="PX1023Title" xml:space="preserve">
    <value>The DAC property cannot be marked with multiple field attributes</value>
  </data>
  <data name="PX1023Fix" xml:space="preserve">
    <value>Leave the selected field attribute and remove other field attributes from the property</value>
  </data>
</root>