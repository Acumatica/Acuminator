<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PX1000Fix" xml:space="preserve">
    <value>Fix PXAction handler signature</value>
  </data>
  <data name="PX1000Title" xml:space="preserve">
    <value>Invalid PXAction handler signature</value>
  </data>
  <data name="PX1001Fix" xml:space="preserve">
    <value>Create a graph instance by using the factory method</value>
  </data>
  <data name="PX1001Title" xml:space="preserve">
    <value>A PXGraph instance must be created with the PXGraph.CreateInstance() factory method</value>
  </data>
  <data name="PX1002Fix" xml:space="preserve">
    <value>Add the type attribute corresponding to the list attribute</value>
  </data>
  <data name="PX1002Title" xml:space="preserve">
    <value>The field must have the type attribute corresponding to the list attribute</value>
  </data>
  <data name="PX1003Title" xml:space="preserve">
    <value>Consider using a specific implementation of PXGraph</value>
  </data>
  <data name="PX1004Fix" xml:space="preserve">
    <value>Consider changing the declaration order</value>
  </data>
  <data name="PX1004Title" xml:space="preserve">
    <value>This order of view declarations will cause creation of two cache instances: {0} and {1}</value>
  </data>
  <data name="PX1005Fix" xml:space="preserve">
    <value>Change the view delegate name to match the view name</value>
  </data>
  <data name="PX1005MessageFormat" xml:space="preserve">
    <value>A possible typo in the view delegate name. The view name for this delegate: {0}</value>
  </data>
  <data name="PX1005Title" xml:space="preserve">
    <value>A possible typo in the view delegate name</value>
  </data>
  <data name="PX1006Fix" xml:space="preserve">
    <value>Consider changing the declaration order</value>
  </data>
  <data name="PX1006Title" xml:space="preserve">
    <value>This order of view declarations will cause creation of one cache instance for the following DACs: {0} and {1}</value>
  </data>
  <data name="PX1007Fix" xml:space="preserve">
    <value>Create a DAC instance by using the factory method</value>
  </data>
  <data name="PX1007MessageFormat" xml:space="preserve">
    <value>An instance of {0} must be created with the PXCache&lt;{0}&gt;.CreateInstance() factory method</value>
  </data>
  <data name="PX1007Title" xml:space="preserve">
    <value>A DAC instance must be created with the PXCache.CreateInstance() factory method</value>
  </data>
  <data name="PX1008Title" xml:space="preserve">
    <value>Reference of @this graph in this delegate will cause synchronous delegate execution</value>
  </data>
  <data name="PX1009Fix" xml:space="preserve">
    <value>Change the base type to a PXCacheExtension overload</value>
  </data>
  <data name="PX1009Title" xml:space="preserve">
    <value>Multiple levels of inheritance are not supported for PXCacheExtension</value>
  </data>
  <data name="PX1010Fix" xml:space="preserve">
    <value>Reset StartRow</value>
  </data>
  <data name="PX1010Title" xml:space="preserve">
    <value>If a delegate applies paging in an inner select, StartRow must be reset (If StartRow is not reset, paging will be applied twice)</value>
  </data>
  <data name="PX1011Fix" xml:space="preserve">
    <value>Mark the type as sealed</value>
  </data>
  <data name="PX1011Title" xml:space="preserve">
    <value>Because multiple levels of inheritance are not supported for PXCacheExtension, the derived type can be marked as sealed</value>
  </data>
  <data name="PX1012Fix" xml:space="preserve">
    <value>Change the type parameter of the action to the primary DAC ({0})</value>
  </data>
  <data name="PX1012Title" xml:space="preserve">
    <value>The type parameter of the {0} action is not the primary DAC. You should specify the {1} DAC as the type parameter to make the action available on the toolbar.</value>
  </data>
  <data name="PX1014Fix" xml:space="preserve">
    <value>Make the type nullable</value>
  </data>
  <data name="PX1014Title" xml:space="preserve">
    <value>A DAC field must have a nullable type</value>
  </data>
  <data name="PX1015MessageFormatWithOnlyRequiredParams" xml:space="preserve">
    <value>The number of arguments passed to the {0} method does not match the number of BQL statement parameters. The number of required arguments is {1}.</value>
  </data>
  <data name="PX1015MessageFormatWithRequiredAndOptionalParams" xml:space="preserve">
    <value>The number of arguments passed to the {0} method does not match the number of BQL statement parameters. The number of arguments should be from {1} to {2}.</value>
  </data>
  <data name="PX1018Title" xml:space="preserve">
    <value>The graph with the specified primary DAC type does not contain a view of this type</value>
  </data>
  <data name="PX1021Title" xml:space="preserve">
    <value>The type of the DAC field attribute does not correspond to the property type</value>
  </data>
  <data name="PX1021PropertyFix" xml:space="preserve">
    <value>Change the property type so that it corresponds to the attribute type</value>
  </data>
  <data name="PX1023MultipleTypeAttributesOnPropertyTitle" xml:space="preserve">
    <value>The DAC property cannot be marked with multiple field type attributes</value>
  </data>
  <data name="PX1023MultipleTypeAttributesOnAggregatorsTitle" xml:space="preserve">
    <value>The attribute aggregates incompatible field type attributes</value>
  </data>
  <data name="PX1023MultipleSpecialTypeAttributesOnPropertyTitle" xml:space="preserve">
    <value>The DAC property cannot be marked with multiple PXDBScalar or PXDBCalced attributes</value>
  </data>
  <data name="PX1023MultipleSpecialTypeAttributesOnAggregatorsTitle" xml:space="preserve">
    <value>The attribute aggregates multiple PXDBScalar or PXDBCalced attributes</value>
  </data>
  <data name="PX1023TypeAttributesFix" xml:space="preserve">
    <value>Leave the selected attribute and remove other field type attributes from the property</value>
  </data>
  <data name="PX1023SpecialAttributesFix" xml:space="preserve">
    <value>Leave the selected attribute and remove other PXDBScalar or PXDBCalced attributes from the property</value>
  </data>
  <data name="PX1024Title" xml:space="preserve">
    <value>The DAC field type must be abstract</value>
  </data>
  <data name="PX1024Fix" xml:space="preserve">
    <value>Make the DAC field type abstract</value>
  </data>
  <data name="PX1026Title" xml:space="preserve">
    <value>Underscores cannot be used in DAC declarations</value>
  </data>
  <data name="PX1026Fix" xml:space="preserve">
    <value>Remove underscores from the DAC declaration</value>
  </data>
  <data name="PX1027Fix" xml:space="preserve">
    <value>Remove the forbidden field from the DAC declaration</value>
  </data>
  <data name="PX1027MessageFormat" xml:space="preserve">
    <value>The {0} field cannot be declared within a DAC declaration</value>
  </data>
  <data name="PX1028Fix" xml:space="preserve">
    <value>Remove the constructor</value>
  </data>
  <data name="PX1028Title" xml:space="preserve">
    <value>Constructors in DACs are prohibited</value>
  </data>
  <data name="PX1029Title" xml:space="preserve">
    <value>PXGraph instances cannot be used inside DAC properties</value>
  </data>
  <data name="PX1031Title" xml:space="preserve">
    <value>DACs cannot contain instance methods</value>
  </data>
  <data name="PX1032Title" xml:space="preserve">
    <value>DAC properties cannot contain method invocations</value>
  </data>
  <data name="PX1030FixBound" xml:space="preserve">
    <value>Set PersistingCheck of PXDefaultAttribute to Nothing</value>
  </data>
  <data name="PX1030TitleDefaultAttributeOnDacExtension" xml:space="preserve">
    <value>The PXDefault attribute of the field is used incorrectly. PXDefaultAttribute used on a custom field defined in PXCacheExtension can potentially prevent updates to existing records when used without PersistingCheck property set to Nothing</value>
  </data>
  <data name="PX1040Fix" xml:space="preserve">
    <value>Move the code to the Initialize() method</value>
  </data>
  <data name="PX1040Title" xml:space="preserve">
    <value>Constructors in BLC extensions are strictly prohibited. Use the Initialize() method instead.</value>
  </data>
  <data name="PX1030FixUnbound" xml:space="preserve">
    <value>Replace with PXUnboundDefaultAttribute</value>
  </data>
  <data name="PX1042Fix" xml:space="preserve">
    <value>Surround the BQL statement or database query execution with a connection scope</value>
  </data>
  <data name="PX1042Title" xml:space="preserve">
    <value>In a RowSelecting handler, BQL statements and other database queries must be executed only inside a separate connection scope</value>
  </data>
  <data name="PX1050Title" xml:space="preserve">
    <value>Hardcoded strings are not allowed as parameters for localization methods and PXException constructors. You should use string constants from the appropriate localizable messages class.</value>
  </data>
  <data name="PX1051Title" xml:space="preserve">
    <value>Non-localizable strings are not allowed as parameters for localization methods and PXException constructors. You should mark the appropriate messages class with PXLocalizableAttribute.</value>
  </data>
  <data name="PX1052Title" xml:space="preserve">
    <value>Incorrect format string in the localization method. You should use correct format string constants from the appropriate localizable messages class.</value>
  </data>
  <data name="PX1053Title" xml:space="preserve">
    <value>Strings concatenation is not allowed as a parameter for localization methods and PXException constructors. You should use localization format methods instead.</value>
  </data>
  <data name="PX1015Title" xml:space="preserve">
    <value>The number of arguments passed to the method does not match the number of BQL statement parameters</value>
  </data>
  <data name="PX1027Title" xml:space="preserve">
    <value>System fields cannot be declared within a DAC declaration</value>
  </data>
  <data name="PX1043Title" xml:space="preserve">
    <value>Changes cannot be saved to the database from the event handler</value>
  </data>
  <data name="PX1043TitleRowPersisting" xml:space="preserve">
    <value>Only the methods of the PXCache.Persist family can be used to save changes to the database from a RowPersisting event handler</value>
  </data>
  <data name="PX1044Title" xml:space="preserve">
    <value>Changing PXCache is prohibited in this event handler</value>
  </data>
  <data name="PX1044MessageFormat" xml:space="preserve">
    <value>Changing PXCache is prohibited in the {0} event handler</value>
  </data>
  <data name="PX1057Title" xml:space="preserve">
    <value>A PXGraph instance cannot be initialized while another PXGraph instance is being initialized</value>
  </data>
  <data name="PX1046Title" xml:space="preserve">
    <value>A long-running operation cannot be started within an event handler</value>
  </data>
  <data name="EventHandlerSignatureCodeActionTitle" xml:space="preserve">
    <value>Convert an event handler signature to the generic one. Please, be careful because an event handler can be overwritten somewhere else.</value>
  </data>
  <data name="PX1045Title" xml:space="preserve">
    <value>A PXGraph instance cannot be created within an event handler</value>
  </data>
  <data name="PX1058Title" xml:space="preserve">
    <value>A PXGraph instance should not save changes to the database during the initialization phase</value>
  </data>
  <data name="PX1047MessageFormat" xml:space="preserve">
    <value>A DAC instance passed to the {0} event handler cannot be modified inside this event handler</value>
  </data>
  <data name="PX1059Title" xml:space="preserve">
    <value>Changes to PXCache cannot be performed during PXGraph initialization</value>
  </data>
  <data name="PX1047Title" xml:space="preserve">
    <value>A DAC instance passed to the event handler cannot be modified inside the event handler</value>
  </data>
  <data name="PX1054Title" xml:space="preserve">
    <value>A PXGraph instance should not start PXLongOperation during the initialization phase</value>
  </data>
  <data name="PX1048MessageFormat" xml:space="preserve">
    <value>Only the DAC instance that is passed in the event arguments can be modified in the {0} event handler</value>
  </data>
  <data name="PX1048Title" xml:space="preserve">
    <value>Only the DAC instance that is passed in the event arguments can be modified in this event handler</value>
  </data>
  <data name="PX1049Title" xml:space="preserve">
    <value>In a RowSelected handler, BQL statements and other database queries should be avoided</value>
  </data>
  <data name="PX1070Title" xml:space="preserve">
    <value>The state of fields and actions can be configured only in the RowSelected event handler</value>
  </data>
  <data name="PX1071Title" xml:space="preserve">
    <value>Actions cannot be executed within event handlers</value>
  </data>
  <data name="PX1072Title" xml:space="preserve">
    <value>BQL queries must be executed within the context of an existing PXGraph instance</value>
  </data>
  <data name="PX1080Title" xml:space="preserve">
    <value>Data view delegates should not start long-running operations</value>
  </data>
  <data name="PX1055FixEditKeyFieldAttributes" xml:space="preserve">
    <value>Make the field bound to the identity column be the only key field in the DAC</value>
  </data>
  <data name="PX1055FixEditIdentityAttribute" xml:space="preserve">
    <value>Make the field bound to the identity column be a non-key field and leave all other key fields untouched</value>
  </data>
  <data name="PX1055FixRemoveIdentityAttribute" xml:space="preserve">
    <value>Remove the definition of the field bound to the identity column and leave all other key fields untouched. (You should drop the corresponding identity column from the database manually.)</value>
  </data>
  <data name="PX1055Title" xml:space="preserve">
    <value>Invalid primary key of the DAC. Use a single identity field or one or multiple natural fields for the key.</value>
  </data>
  <data name="PX1073Title" xml:space="preserve">
    <value>Exceptions cannot be thrown in the RowPersisted event handler</value>
  </data>
  <data name="PX1074Title" xml:space="preserve">
    <value>PXSetupNotEnteredException cannot be thrown in this event handler. Use the RowSelected event handler instead</value>
  </data>
  <data name="PX1074MessageFormat" xml:space="preserve">
    <value>PXSetupNotEnteredException cannot be thrown in the {0} event handler. Use the RowSelected event handler instead</value>
  </data>
  <data name="PX1075MessageFormat" xml:space="preserve">
    <value>PXCache.RaiseExceptionHandling cannot be invoked from the {0} event handler</value>
  </data>
  <data name="PX1075Title" xml:space="preserve">
    <value>PXCache.RaiseExceptionHandling cannot be invoked from this event handler</value>
  </data>
  <data name="PX1081Title" xml:space="preserve">
    <value>Actions cannot be executed during the PXGraph initialization</value>
  </data>
  <data name="PX1082Title" xml:space="preserve">
    <value>Actions cannot be executed within data view delegates</value>
  </data>
  <data name="PX1072Fix" xml:space="preserve">
    <value>Replace {0} with the following PXGraph instance: {1}</value>
  </data>
  <data name="PX1083Title" xml:space="preserve">
    <value>Changes cannot be saved to the database from data view delegates</value>
  </data>
  <data name="PX1030TitleDefaultAttributeOnDac" xml:space="preserve">
    <value>Consider setting PersistingCheck to Nothing or replacing PXDefault with PXUnboundDefault</value>
  </data>
  <data name="PX1084Title" xml:space="preserve">
    <value>PXGraph instances cannot be initialized within data view delegates</value>
  </data>
  <data name="PX1085Title" xml:space="preserve">
    <value>BQL statements and other database queries should not be executed during the PXGraph initialization</value>
  </data>
  <data name="PX1086Title" xml:space="preserve">
    <value>PXSetupNotEnteredException cannot be thrown during the PXGraph initialization</value>
  </data>
  <data name="PX1087Title" xml:space="preserve">
    <value>This invocation of the base data view delegate can cause a StackOverflowException</value>
  </data>
  <data name="PX1088Title" xml:space="preserve">
    <value>Processing delegates cannot use the data views from processing graphs except for the data views of the PXFilter, PXProcessingBase, or PXSetup types</value>
  </data>
</root>